//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/TankControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TankControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TankControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TankControls"",
    ""maps"": [
        {
            ""name"": ""Ground"",
            ""id"": ""db518bf0-18d2-4372-9273-2fa7ba0b7c26"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5c4045c6-6106-4689-a4b0-9f1b5b6ccb29"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""d6586415-80e9-46c4-942e-b02efa58cd30"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""67e3dd01-57dd-447b-a7c9-8780b5f0579c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pitch Up"",
                    ""type"": ""Button"",
                    ""id"": ""896ae8d8-2089-4875-a75d-f906a8e5105c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pitch Down"",
                    ""type"": ""Button"",
                    ""id"": ""d8f9163e-9438-491e-a9cb-ea7dade75500"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Yaw Left"",
                    ""type"": ""Button"",
                    ""id"": ""37a09a26-9589-406e-993b-37199039db88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Yaw Right"",
                    ""type"": ""Button"",
                    ""id"": ""d62b0210-11e4-4b99-a8eb-92282172771f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll Left"",
                    ""type"": ""Button"",
                    ""id"": ""bdf930de-a0b4-48d1-96e0-59e8b6cba2b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll Right"",
                    ""type"": ""Button"",
                    ""id"": ""b37ad0a5-da5e-48b3-ae92-e1b999868340"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0fd289a9-9bd2-468e-808c-5b0dd353629d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4d7976a5-61ac-4618-bca8-566a7c0a8a9d"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b1828c01-2c0f-49c0-a441-38e76b6ba5ea"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""76f871e5-53be-4600-a3bd-4edf735ee4de"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""212eb624-c93c-48c0-ae71-f298b360ce9f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8a4f4fe8-c944-478a-a303-c0f08b21c0f7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1a3b152b-ec93-4064-8f51-1a036c032cec"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8e23acd3-4f4e-465b-8f99-a56461e78a5b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""46292389-06e6-4a02-922d-5999f35aa59c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""60714283-025b-462d-9374-1d3a77c68ac0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d622d11b-3f5e-47ec-9bba-d066f09da6f2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ff36ba78-ba6d-48ea-baba-629b091636b7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1e8b8423-e12c-411d-8446-a5057cce48c6"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c0ed45f-9eb8-49a4-ad7d-049fd3d121e5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b76f3d3-d8d7-444e-a199-a3f5996c3283"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b623127c-8cde-4382-ad27-63b67931b5ae"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51f9a495-c458-407f-8060-9e6006415b73"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aac14e6b-db3d-42e0-9056-a46289236aa9"",
                    ""path"": ""<Keyboard>/comma"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba33c925-12a7-4dea-94d7-bd51ac5d31cb"",
                    ""path"": ""<Keyboard>/period"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ground
        m_Ground = asset.FindActionMap("Ground", throwIfNotFound: true);
        m_Ground_Move = m_Ground.FindAction("Move", throwIfNotFound: true);
        m_Ground_Rotate = m_Ground.FindAction("Rotate", throwIfNotFound: true);
        m_Ground_Shoot = m_Ground.FindAction("Shoot", throwIfNotFound: true);
        m_Ground_PitchUp = m_Ground.FindAction("Pitch Up", throwIfNotFound: true);
        m_Ground_PitchDown = m_Ground.FindAction("Pitch Down", throwIfNotFound: true);
        m_Ground_YawLeft = m_Ground.FindAction("Yaw Left", throwIfNotFound: true);
        m_Ground_YawRight = m_Ground.FindAction("Yaw Right", throwIfNotFound: true);
        m_Ground_RollLeft = m_Ground.FindAction("Roll Left", throwIfNotFound: true);
        m_Ground_RollRight = m_Ground.FindAction("Roll Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ground
    private readonly InputActionMap m_Ground;
    private IGroundActions m_GroundActionsCallbackInterface;
    private readonly InputAction m_Ground_Move;
    private readonly InputAction m_Ground_Rotate;
    private readonly InputAction m_Ground_Shoot;
    private readonly InputAction m_Ground_PitchUp;
    private readonly InputAction m_Ground_PitchDown;
    private readonly InputAction m_Ground_YawLeft;
    private readonly InputAction m_Ground_YawRight;
    private readonly InputAction m_Ground_RollLeft;
    private readonly InputAction m_Ground_RollRight;
    public struct GroundActions
    {
        private @TankControls m_Wrapper;
        public GroundActions(@TankControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Ground_Move;
        public InputAction @Rotate => m_Wrapper.m_Ground_Rotate;
        public InputAction @Shoot => m_Wrapper.m_Ground_Shoot;
        public InputAction @PitchUp => m_Wrapper.m_Ground_PitchUp;
        public InputAction @PitchDown => m_Wrapper.m_Ground_PitchDown;
        public InputAction @YawLeft => m_Wrapper.m_Ground_YawLeft;
        public InputAction @YawRight => m_Wrapper.m_Ground_YawRight;
        public InputAction @RollLeft => m_Wrapper.m_Ground_RollLeft;
        public InputAction @RollRight => m_Wrapper.m_Ground_RollRight;
        public InputActionMap Get() { return m_Wrapper.m_Ground; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundActions set) { return set.Get(); }
        public void SetCallbacks(IGroundActions instance)
        {
            if (m_Wrapper.m_GroundActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnRotate;
                @Shoot.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnShoot;
                @PitchUp.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnPitchUp;
                @PitchUp.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnPitchUp;
                @PitchUp.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnPitchUp;
                @PitchDown.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnPitchDown;
                @PitchDown.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnPitchDown;
                @PitchDown.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnPitchDown;
                @YawLeft.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnYawLeft;
                @YawLeft.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnYawLeft;
                @YawLeft.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnYawLeft;
                @YawRight.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnYawRight;
                @YawRight.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnYawRight;
                @YawRight.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnYawRight;
                @RollLeft.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnRollLeft;
                @RollLeft.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnRollLeft;
                @RollLeft.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnRollLeft;
                @RollRight.started -= m_Wrapper.m_GroundActionsCallbackInterface.OnRollRight;
                @RollRight.performed -= m_Wrapper.m_GroundActionsCallbackInterface.OnRollRight;
                @RollRight.canceled -= m_Wrapper.m_GroundActionsCallbackInterface.OnRollRight;
            }
            m_Wrapper.m_GroundActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @PitchUp.started += instance.OnPitchUp;
                @PitchUp.performed += instance.OnPitchUp;
                @PitchUp.canceled += instance.OnPitchUp;
                @PitchDown.started += instance.OnPitchDown;
                @PitchDown.performed += instance.OnPitchDown;
                @PitchDown.canceled += instance.OnPitchDown;
                @YawLeft.started += instance.OnYawLeft;
                @YawLeft.performed += instance.OnYawLeft;
                @YawLeft.canceled += instance.OnYawLeft;
                @YawRight.started += instance.OnYawRight;
                @YawRight.performed += instance.OnYawRight;
                @YawRight.canceled += instance.OnYawRight;
                @RollLeft.started += instance.OnRollLeft;
                @RollLeft.performed += instance.OnRollLeft;
                @RollLeft.canceled += instance.OnRollLeft;
                @RollRight.started += instance.OnRollRight;
                @RollRight.performed += instance.OnRollRight;
                @RollRight.canceled += instance.OnRollRight;
            }
        }
    }
    public GroundActions @Ground => new GroundActions(this);
    public interface IGroundActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnPitchUp(InputAction.CallbackContext context);
        void OnPitchDown(InputAction.CallbackContext context);
        void OnYawLeft(InputAction.CallbackContext context);
        void OnYawRight(InputAction.CallbackContext context);
        void OnRollLeft(InputAction.CallbackContext context);
        void OnRollRight(InputAction.CallbackContext context);
    }
}
